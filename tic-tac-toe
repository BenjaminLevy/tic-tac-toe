class Game{

    newBoard = {
      a:["_","_","_"],
      b:["_","_","_"],
      c:["_","_","_"]
    }

  constructor(){
    this.currentPlayer = 'x'
    initializeGame()
  }
  initializeGame(){
    this.board = this.newBoard
    this.promptPlayer() 
    this.printBoard()
  }

  printBoard(){
    console.table(this.board)
  }
  promptPlayer(){
    console.log(`Player ${this.currentPlayer}, it's your turn. Please make a move:`)
  }
 
  play(input){
    let column, row

    [ column, row ] = this.parseCommand(input)
    this.makeMove(column,row)
    this.checkForWinner()
    this.currentPlayer = this.currentPlayer === 'x'
      ? 'o'
      : 'x'
    this.promptPlayer()
    this.printBoard()
 } 
  parseCommand(input){

    /* Node REPL command adds a new line when you hit enter, */
    /* so it is stripped out here */
    input = input.trim("\n")

    if(input.length != 2){
      console.log(input)
      throw new Error("Move should only be two characters")
    }
      input = input.split("")
      input.sort()
      return [input[0], input[1]]
  }
  
  makeMove(column,row){
   this.board[row][column]  = this.currentPlayer
  }
  checkForWinner(){
    let winnerExists = false
    if(
      this.checkColumns()
      || this.checkRows()
      || this.checkDiagonals() 
      ){
      winnerExists = true
    }
    if(winnerExists){
      this.announceWinner()
      this.initializeGame()
    }
  }
  checkColumns(){
    for(let column = 0; column < 3; column++){
       for(let rowChar = 97; rowChar <100; row ++){
          
       }
    }
  }
  announceWinner(){
    console.log(`CONGRATULATIONS TO PLAYER ${this.currentPlayer}`)
    console.log('YOU WIN!!!!')
  }
}

const repl = require('node:repl');

console.log("TERMINAL TAC TOE")

const r = repl.start({ prompt: '> ', eval: myEval, ignoreUndefined: true});

const game = new Game()

function myEval(cmd, context, filename, callback) {
  callback(null, game.play(cmd));
}

/* const options = { useColors: true } */





