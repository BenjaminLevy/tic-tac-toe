const repl = require('node:repl');
const balloons = require("./assci.js").balloons
const cloneDeep = require("lodash.clonedeep")

const errorTooManyChars =  new Error("Move should only be two characters")
const errorSpaceAlreadyFilled = new Error( "This space has been filled already. Please pick another:")
const errorMoveOutsideRange = new Error( `Invalid move. Please pick an unfilled row and column in the ranges "a" through "c" and 0 through 2:`)

const EMTPY_SPACE = "_"

class Game{

    newBoard = {
      a:[EMPTY_SPACE,EMPTY_SPACE,EMPTY_SPACE],
      b:[EMPTY_SPACE,EMPTY_SPACE,EMPTY_SPACE],
      c:[EMPTY_SPACE,EMPTY_SPACE,EMPTY_SPACE]
    }

  constructor(){
    this.initializeGame()
  }
  initializeGame(){
    this.currentPlayer = 'x'
    this.board = cloneDeep(this.newBoard)

    //TODO change to set
    this.availableMoves = {
      "a0":true,"a1":true, "a2":true,
      "b0":true, "b1":true, "b2":true,
      "c0":true,"c1":true, "c2":true  
    }
    this.promptPlayer() 
    this.printBoard()
  }

  printBoard(){
    console.table(this.board)
  }
  promptPlayer(){
    console.log(`Player ${this.currentPlayer}, it's your turn. Please make a move:`)
  }
 
  play(input){
    try{
    let [ column, row ] = this.parseCommand(input)
    this.makeMove(column,row)

    if(this.checkForWinner()){
      this.announceWinner()
      this.initializeGame()
    }else{
      this.currentPlayer = this.currentPlayer === 'x'
        ? 'o'
        : 'x'
      this.promptPlayer()
      this.printBoard()
    }
    } catch(e) {
      console.log(e.message)
      return
    }
 } 
  parseCommand(input){

    /* Node REPL command adds a new line when you hit enter, */
    /* so it is stripped out here */
    input = input.trim("\n")

    if(input.length != 2){
      throw errorTooManyChars
    }
      input = input.split("")
      input.sort()
      return [input[0], input[1]] // returns [ column, row ]
  }
  
  makeMove(column,row){
    const rowAndColumn = row + column
    if(this.availableMoves[rowAndColumn] === false){
      throw errorSpaceAlreadyFilled
    }
    if(this.availableMoves[rowAndColumn] === undefined){
      throw errorMoveOutsideRange
    }
    this.availableMoves[rowAndColumn] = false

    this.board[row][column] = this.currentPlayer
    return [true, undefined]
    
  }
  checkForWinner(){
    return (
      this.checkColumns()
      || this.checkRows()
      || this.checkDiagonals() 
      )
  }
  checkColumns(){
    for(let column = 0; column < 3; column++){
      if(
          this.board["a"][column] === this.currentPlayer // Ensure there isn't a match on an empty/unplayed row
          && this.board["a"][column] === this.board["b"][column] 
          && this.board["b"][column] === this.board["c"][column]
        ){return true}
    }
    return false
  }
  checkRows(){
    for(let rowCharCode = 97; rowCharCode < 100; rowCharCode++){
      let char = String.fromCharCode(rowCharCode)
      if(
          this.board[char][0] === this.currentPlayer // Ensure there isn't a match on an empty/unplayed row
          && this.board[char][0] === this.board[char][1] 
          && this.board[char][1] === this.board[char][2]
        ){return true}
    }
    return false
  }
  checkDiagonals(){
      if(
          (
            this.board["a"][0] === this.currentPlayer // Ensure there isn't a match on an empty/unplayed row
            && this.board["a"][0] === this.board["b"][1] 
            && this.board["b"][1] === this.board["c"][2]
          )
          ||(
            this.board["a"][2] === this.currentPlayer // Ensure there isn't a match on an empty/unplayed row
            && this.board["a"][2] === this.board["b"][1] 
            && this.board["b"][1] === this.board["c"][0]
          )
        ){return true}
    return false
  }
  announceWinner(){
    console.log(balloons)
    console.log(`CONGRATULATIONS TO PLAYER ${this.currentPlayer}`)
    console.log('YOU WIN!!!!')
    console.log("New game starting...")
  }
}


console.log("TERMINAL TAC TOE")

const r = repl.start({ prompt: '> ', eval: myEval, ignoreUndefined: true});

const game = new Game()

function myEval(cmd, context, filename, callback) {
  callback(null, game.play(cmd));
}





